name: Workflow
on:
  push:
    branches:
      - feat-devsecops

jobs:        
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Hola Mundo
      run: | 
        echo 'Hola mundo!'
    
    - name: Build
      run: | 
        chmod 777 gradlew
        ./gradlew build

    - name: Validando existencia de proyecto en SonarCloud
      id: validateProjectOnSonar
      run: |
        #pwd
        #ls -R
        set +e
        curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=cursodevsecops' -d 'organization=cursodevsecops' -d 'visibility=public'
        if [ $? -ne 0 ]; then
          echo "Proyecto ya existe en Sonarcloud"
          echo "::set-output name=proyectoExiste::1"
        else
          echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
          
          echo "Se establece rama main como rama por defecto"
          curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=cursodevsecops'
        fi
        set -e

    - name: Validando tipo de proyecto
      id: tipoProyecto
      if: steps.validateProjectOnSonar.outputs.proyectoExiste == '1'
      run: |
        pwd
        ls -R
        if [ -f "build.gradle" ]
        then
          echo "Proyecto Java"
          if grep -q 'id "org.sonarqube" version "3.3"' build.gradle
          then
            echo "El plugin de SonarCloud ya está presente en build.gradle"
          else
            sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
            echo "El plugin de SonarCloud no estaba presente y se ha sido añadido a build.gradle"
            cat build.gradle
          fi

        else
          echo "Tipo de proyecto desconocido"
        fi
    
    - name: Run SonarQube analysis
      run: |
        ./gradlew sonarqube \
        -Dsonar.projectKey=cursodevsecops \
        -Dsonar.organization=cursodevsecops \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
        -Dsonar.branch.name=feat-devsecops


#--------------------- SCA -------------------------------------------
      
  SCA:
    needs: SAST #CON NEEDS CREAMOS LA DEPENDENCIA CON LA EJECUCION EXITOSA DEL JOB ANTERIOR
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2      

    - name: Build #NO SE UTILIZA EL BUILD DEL JOB ANTERIOR PORQUE ESTE ES UN JOB NUEVO
      id: build
      run: |
        if [ -f "build.gradle" ]
        then
          echo "Utiliza build.gradle, proyecto Java"
          echo "Se habilita permiso de ejecución de archivo gradlew"
          chmod 777 gradlew
          ./gradlew build
        else
          echo "Otro tipo de proyecto"
        fi
    
    - name: Dependency Check  
      uses: dependency-check/Dependency-Check_Action@1.1.0  #HERRAMIENTA OPENSOURCE PARA EL CHEQUEO DE DEPENDENCIAS DE TERCEROS
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'HTML' #CON ESTO INDICAMOS EL FORMATO DEL INFORME QUE EN ESTE CASO SERA HTML
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
 
    - name: Upload Test result #CON ESTE FRAGMENTO DE CODIGO RESCATAMOS EL REPORTE GENERADO ANTERIORMENTE
      uses: actions/upload-artifact@master
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

#-------------------- Docker Build Image ----------------------------

  DockerBuild:
    needs: SCA
    runs-on: self-hosted #ESTA LINEA ES PARA UTILIZAR EL RUNNER DE NUESTRA MAQUINA LOCAL
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Download JAR
      uses: actions/download-artifact@master
      with:
        name: JAR
        path: ${{github.workspace}}
    
    - name: Build Docker
      run: |
        docker build --tag cmendoza83/cursodevsecops-dkr:latest .
        
    - name: Push Docker
      run: | 
        docker push cmendoza83/cursodevsecops-dkr:latest

# ------------------ Docker Scan ------------------------------------

#  DockerScan:
#    needs: DockerBuild
#    runs-on: ubuntu-latest
#    steps:
    
#    - name: Docker Login
#      uses: docker/login-action@v3.0.0
#      with:
#        username: ${{ secrets.DOCKER_USER }}
#        password: ${{ secrets.DOCKER_PASS }}

#    - name: Pull de la Imagen Docker
#      run: |
#        docker pull cmendoza83/cursodevsecops-test:latest
    
#    - name: Run Trivy vulnerability scanner
#      uses: aquasecurity/trivy-action@master
#      with:
#        image-ref: 'cmendoza83/cursodevsecops-test:latest'
#        format: 'table'
    
#    - name: Push Docker
#      run: | 
#        docker push cmendoza83/cursodevsecops-test:latest


# ----------------- DAST -----------------------------------------

#  DAST:
#    needs: DockerScan
#    runs-on: self-hosted
#    steps:
    
#    - name: Despliegue Aplicaion
#      run: |
#        docker run -p 8085:8085 --name pet-clinic-deploy -d cmendoza83/cursodevsecops-test:latest

#    - name: Sleep
#      run: | 
#        sleep 30

##    - name: OWASP ZAP Scan
##      uses: zaproxy/action-baseline@v0.11.0
##      with:
##        target: 'http://localhost:8085/'
    
#    - name: OWASP ZAP Scan
#      run: |
#        docker pull owasp/zap2docker-stable
#        docker run --rm -v ${PWD}:/zap/wrk/:rw -t owasp/zap2docker-stable & zap-baseline.py -t http://localhost:8085 -r DAST.html
